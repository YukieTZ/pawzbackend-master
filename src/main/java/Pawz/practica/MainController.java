package Pawz.practica;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@CrossOrigin ( origins = "http://127.0.0.1:5501")
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private usuarioRepository UsuarioRepository;
    @Autowired
    private publicacionRepository PublicacionRepository;
    @Autowired
    private comentariosRepository ComentariosRepository;
    @Autowired
    private friendsRepository FriendsRepository;

    public MainController() {
    }

    @PostMapping(path="/add_usuario") // Map ONLY POST Requests
    public @ResponseBody usuario addNewUser(@RequestBody usuario Usuario) {
        //return "Saved";
        return UsuarioRepository.save(Usuario);
    }

    @GetMapping(path="/all_usuarios")
    public @ResponseBody Iterable<usuario> getAllUsers() {
        // This returns a JSON or XML with the users
        return UsuarioRepository.findAll();
    }

    @PutMapping("/updateUser")
    public @ResponseBody String updateUser(@RequestBody usuario Usuario1) {
        UsuarioRepository.save(Usuario1);
        return "Usuario actualizado";
    }

    @DeleteMapping(path = "/delete_user/{IdUsuario}")
    public @ResponseBody String deleteUsuario(@PathVariable ("IdUsuario") Integer IdUsuario){
        UsuarioRepository.deleteById(IdUsuario);
        return "User deleted";
    }

    @PutMapping("/updateUser/{IdUsuario}")
    public void updateUsuario(@RequestBody usuario newUser) {
        UsuarioRepository.save(newUser);

    }

    @PostMapping(path="/add_publicacion") // Map ONLY POST Requests
    public @ResponseBody publicacion addNewPublicacion (@RequestBody publicacion Publicacion) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        return PublicacionRepository.save(Publicacion);
    }

    @GetMapping(path="/all_publicaciones")
    public @ResponseBody Iterable<publicacion> getAllPublicaciones() {
        // This returns a JSON or XML with the users
        return PublicacionRepository.findAll();
    }

    @PutMapping("/updatePublicacion")
    public @ResponseBody String updatePublicacion(@RequestBody publicacion Publicacion) {
        PublicacionRepository.save(Publicacion);
        return "Publicacion actualizada";
    }

    @DeleteMapping (path="/eliminar_publicacion/{IdPublicacion}")
    public @ResponseBody String eliminar(@PathVariable("IdPublicacion") Integer IdPublicacion){

        PublicacionRepository.deleteById(IdPublicacion);
        return "Deleted";

    }

    @PostMapping(path="/add_comentario") // Map ONLY POST Requests
    public @ResponseBody comentarios addNewComentarios (@RequestParam comentarios Comentario){
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        return ComentariosRepository.save(Comentario);
    }

    @GetMapping(path="/all_comentarios")
    public @ResponseBody Iterable<comentarios> getAllComentarios() {
        // This returns a JSON or XML with the users
        return ComentariosRepository.findAll();
    }

    @PutMapping("/updateComentario")
    public @ResponseBody String updateComentario(@RequestBody comentarios Comentario) {
        ComentariosRepository.save(Comentario);
        return "Comentario actualizado";
    }

    @DeleteMapping (path="/eliminar_comentario/{IdComentario}")
    public @ResponseBody String eliminarComentario(@PathVariable("IdComentario") Integer IdComentario) {

        ComentariosRepository.deleteById(IdComentario);
        return "Deleted";
    }

    @PostMapping(path="/add_friends") // Map ONLY POST Requests
    public @ResponseBody String addNewFriend (@RequestParam Integer idUsuario2,
                                              @RequestParam Integer IdAmiwo) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Friends n = new Friends();
        n.setIdUsuario(idUsuario2);
        n.setIdAmiwo(IdAmiwo);
        FriendsRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all_friends")
    public @ResponseBody Iterable<Friends> getAllFriends() {
        // This returns a JSON or XML with the users
        return FriendsRepository.findAll();
    }

    @DeleteMapping (path="/eliminar_amigo/{IdAmistad}")
    public @ResponseBody String eliminarAmistad(@PathVariable("IdAmistad") Integer IdAmistad){

        FriendsRepository.deleteById(IdAmistad);
        return "Deleted";

    }
}
